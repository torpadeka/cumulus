"use client"

import { useState } from "react"
import { Card } from "@/components/card"
import { TextDisplay } from "@/components/text-display"
import { Button } from "@/components/ui/button"
import { Checkbox } from "@/components/ui/checkbox"
import { CameraIcon, MicIcon, SparklesIcon, WrenchIcon } from "lucide-react"
import { WebcamCapture } from "@/components/webcam-capture"
import { SpeechRecognition } from "@/components/speech-recognition"
import { DebugConsole } from "@/components/debug-console"

export function Dashboard() {
  // State for webcam
  const [webcamActive, setWebcamActive] = useState(false)
  const [extractedText, setExtractedText] = useState("")

  // State for speech recognition
  const [micActive, setMicActive] = useState(false)
  const [speechText, setSpeechText] = useState("")

  // State for summary
  const [summaryText, setSummaryText] = useState("")
  const [audioData, setAudioData] = useState<string | null>(null)

  // Debug state
  const [showDebug, setShowDebug] = useState(false)
  const [debugMessages, setDebugMessages] = useState<string[]>([])

  // Add debug message
  const addDebugMessage = (message: string) => {
    const timestamp = new Date().toLocaleTimeString()
    setDebugMessages((prev) => [...prev.slice(-19), `[${timestamp}] ${message}`])
  }

  // Generate summary
  const generateSummary = async () => {
    try {
      addDebugMessage("Generating summary...")

      // In a real implementation, this would call the Azure OpenAI service
      // For now, we'll simulate a response
      setTimeout(() => {
        const summary =
          "This is a simulated summary of the detected text and speech. In a real implementation, this would be generated by Azure OpenAI based on the OCR and speech recognition results."
        setSummaryText(summary)
        addDebugMessage("Summary generated successfully")

        // Simulate TTS audio generation
        setAudioData("data:audio/mp3;base64,AAAAFGZ0eXBtcDQyAAAAAG1wNDJtcDQxAAAA")
      }, 1500)
    } catch (error) {
      addDebugMessage(`Error generating summary: ${error}`)
    }
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
      <div className="md:col-span-2">
        {/* Webcam Card */}
        <Card
          title="Camera Feed"
          icon={<CameraIcon size={20} />}
          statusIndicator={{ active: webcamActive, label: webcamActive ? "Active" : "Inactive" }}
        >
          <WebcamCapture
            isActive={webcamActive}
            setIsActive={setWebcamActive}
            onTextExtracted={setExtractedText}
            addDebugMessage={addDebugMessage}
          />
        </Card>

        {/* OCR Results Card */}
        <Card title="OCR Results" icon={<CameraIcon size={20} />} tooltip="Text extracted from the camera feed">
          <TextDisplay content={extractedText} emptyMessage="No text detected yet..." />
        </Card>
      </div>

      <div>
        {/* Speech Recognition Card */}
        <Card
          title="Speech Recognition"
          icon={<MicIcon size={20} />}
          statusIndicator={{ active: micActive, label: micActive ? "Active" : "Inactive" }}
        >
          <SpeechRecognition
            isActive={micActive}
            setIsActive={setMicActive}
            onSpeechRecognized={setSpeechText}
            addDebugMessage={addDebugMessage}
          />
          <TextDisplay content={speechText} emptyMessage="Waiting for speech input..." className="mt-4" />
        </Card>

        {/* Summary Card */}
        <Card title="AI Summary" icon={<SparklesIcon size={20} />} tooltip="Summary of detected text and speech">
          <TextDisplay content={summaryText} emptyMessage="Click 'Generate Summary' to analyze detected content" />

          <Button className="mt-4 bg-[#0078D4] hover:bg-[#0063B1]" onClick={generateSummary}>
            Generate Summary
          </Button>

          {audioData && (
            <div className="mt-4">
              <audio controls src={audioData} className="w-full" />
            </div>
          )}
        </Card>

        {/* Debug Toggle */}
        <div className="flex items-center space-x-2 mt-4 mb-2">
          <Checkbox id="debug" checked={showDebug} onCheckedChange={(checked) => setShowDebug(checked as boolean)} />
          <label
            htmlFor="debug"
            className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
          >
            Show Debug Console
          </label>
        </div>

        {/* Debug Console */}
        {showDebug && (
          <Card title="Debug Console" icon={<WrenchIcon size={20} />}>
            <DebugConsole messages={debugMessages} />
          </Card>
        )}
      </div>
    </div>
  )
}
